/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/opskumu/crd-example/apis/test/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigMapHistoryLister helps list ConfigMapHistories.
// All objects returned here must be treated as read-only.
type ConfigMapHistoryLister interface {
	// List lists all ConfigMapHistories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ConfigMapHistory, err error)
	// ConfigMapHistories returns an object that can list and get ConfigMapHistories.
	ConfigMapHistories(namespace string) ConfigMapHistoryNamespaceLister
	ConfigMapHistoryListerExpansion
}

// configMapHistoryLister implements the ConfigMapHistoryLister interface.
type configMapHistoryLister struct {
	indexer cache.Indexer
}

// NewConfigMapHistoryLister returns a new ConfigMapHistoryLister.
func NewConfigMapHistoryLister(indexer cache.Indexer) ConfigMapHistoryLister {
	return &configMapHistoryLister{indexer: indexer}
}

// List lists all ConfigMapHistories in the indexer.
func (s *configMapHistoryLister) List(selector labels.Selector) (ret []*v1.ConfigMapHistory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConfigMapHistory))
	})
	return ret, err
}

// ConfigMapHistories returns an object that can list and get ConfigMapHistories.
func (s *configMapHistoryLister) ConfigMapHistories(namespace string) ConfigMapHistoryNamespaceLister {
	return configMapHistoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigMapHistoryNamespaceLister helps list and get ConfigMapHistories.
// All objects returned here must be treated as read-only.
type ConfigMapHistoryNamespaceLister interface {
	// List lists all ConfigMapHistories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ConfigMapHistory, err error)
	// Get retrieves the ConfigMapHistory from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ConfigMapHistory, error)
	ConfigMapHistoryNamespaceListerExpansion
}

// configMapHistoryNamespaceLister implements the ConfigMapHistoryNamespaceLister
// interface.
type configMapHistoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigMapHistories in the indexer for a given namespace.
func (s configMapHistoryNamespaceLister) List(selector labels.Selector) (ret []*v1.ConfigMapHistory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConfigMapHistory))
	})
	return ret, err
}

// Get retrieves the ConfigMapHistory from the indexer for a given namespace and name.
func (s configMapHistoryNamespaceLister) Get(name string) (*v1.ConfigMapHistory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("configmaphistory"), name)
	}
	return obj.(*v1.ConfigMapHistory), nil
}
